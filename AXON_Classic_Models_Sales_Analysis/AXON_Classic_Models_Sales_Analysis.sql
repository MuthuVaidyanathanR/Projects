/* ------------------------------------------------------------------------------------------------------------------------------ 
|																																|
|													AXON'S CLASSIC MODELS SALES ANAYSIS  									    |
|																																|
-------------------------------------------------------------------------------------------------------------------------------*/




use classicmodels;
Show tables;

SHOW COLUMNS FROM Customers;
SHOW COLUMNS FROM employees;
SHOW COLUMNS FROM offices;
SHOW COLUMNS FROM orderdetails;
SHOW COLUMNS FROM orders;
SHOW COLUMNS FROM payments;
SHOW COLUMNS FROM productlines;
SHOW COLUMNS FROM products;

Select * from Customers
;
DESCRIBE Customers;






-- 1. Most revenue of Top 5 countries
SELECT 
    C.COUNTRY,
    SUM(OD.QUANTITYORDERED * OD.PRICEEACH) AS TOTAL_SALES
FROM
    CUSTOMERS C
        JOIN ORDERS O ON C.CUSTOMERNUMBER = O.CUSTOMERNUMBER
        JOIN ORDERDETAILS OD ON O.ORDERNUMBER = OD.ORDERNUMBER
WHERE
    O.STATUS IN ('SHIPPED' , 'RESOLVED')
GROUP BY C.COUNTRY
ORDER BY TOTAL_SALES DESC
LIMIT 5;


-- 2. Total revenue of Bottom 5 countries
SELECT 
    C.COUNTRY,
    SUM(OD.QUANTITYORDERED * OD.PRICEEACH) AS TOTAL_SALES
FROM
    CUSTOMERS C
        JOIN ORDERS O ON C.CUSTOMERNUMBER = O.CUSTOMERNUMBER
        JOIN ORDERDETAILS OD ON O.ORDERNUMBER = OD.ORDERNUMBER
WHERE
    O.STATUS IN ('SHIPPED' , 'RESOLVED')
GROUP BY C.COUNTRY
ORDER BY TOTAL_SALES ASC
LIMIT 5;



-- 3. Units Sold by Product Line.
SELECT 
    PL.PRODUCTLINE AS PRODUCT_LINE, SUM(OD.QUANTITYORDERED) AS TOTAL_UNITS_SOLD
FROM
    PRODUCTLINES PL
        JOIN PRODUCTS P ON PL.PRODUCTLINE = P.PRODUCTLINE
        JOIN ORDERDETAILS OD ON P.PRODUCTCODE = OD.PRODUCTCODE
        JOIN
    ORDERS O ON OD.ORDERNUMBER = O.ORDERNUMBER
WHERE
    O.STATUS IN ('SHIPPED' , 'RESOLVED')
GROUP BY PL.PRODUCTLINE
ORDER BY TOTAL_UNITS_SOLD DESC;


-- 4. Top 10 Customers by Revenue, Ordered units, product purchased and Quantity purchased.
SELECT 
    C.CUSTOMERNAME AS CUSTOMER_NAME, 
    SUM(OD.QUANTITYORDERED * OD.PRICEEACH) AS TOTAL_SPENT, 
    Count(DISTINCT O.ORDERNUMBER) AS ORDERED_UNITS,
    Count(DISTINCT OD.PRODUCTCODE) AS PRODUCT_PURCHASED,
    SUM(OD.QUANTITYORDERED) AS QUANTITY
FROM
    CUSTOMERS C
        JOIN ORDERS O ON C.CUSTOMERNUMBER = O.CUSTOMERNUMBER
        JOIN ORDERDETAILS OD ON O.ORDERNUMBER = OD.ORDERNUMBER
WHERE
    O.STATUS IN ('SHIPPED' , 'RESOLVED')
GROUP BY C.CUSTOMERNAME, Country
ORDER BY TOTAL_SPENT DESC
LIMIT 10;


-- 5. Sales Representatives and Their Customers for Shipped and Resolved Orders

SELECT 
    UPPER(CONCAT(E.FIRSTNAME, ' ', E.LASTNAME)) AS FULL_NAME,
    COUNT(O.CUSTOMERNUMBER) AS TOTAL_CUSTOMERS,
    COUNT(DISTINCT O.CUSTOMERNUMBER) AS DISTINCT_CUSTOMERS
FROM
    EMPLOYEES E
        JOIN CUSTOMERS C ON E.EMPLOYEENUMBER = C.SALESREPEMPLOYEENUMBER
        JOIN ORDERS O ON C.CUSTOMERNUMBER = O.CUSTOMERNUMBER
WHERE
    O.STATUS IN ('SHIPPED' , 'RESOLVED')
GROUP BY E.FIRSTNAME , E.LASTNAME
ORDER BY TOTAL_CUSTOMERS DESC , DISTINCT_CUSTOMERS DESC, E.FIRSTNAME;



-- 6. Product inventory
SELECT 
    P.PRODUCTNAME AS PRODUCT_NAME,
    SUM(P.QUANTITYINSTOCK) AS TOTAL_STOCK,
    SUM(P.QUANTITYINSTOCK * P.BUYPRICE) AS STOCK_VALUE
FROM
    PRODUCTS P
GROUP BY P.PRODUCTNAME
ORDER BY STOCK_VALUE DESC;



-- 7. Total Sales by Month and Year

SELECT 
    YEAR(O.ORDERDATE) AS YEAR,
    SUM(CASE WHEN MONTH(O.ORDERDATE) = 1 THEN OD.QUANTITYORDERED * OD.PRICEEACH ELSE 0 END) AS JANUARY,
    SUM(CASE WHEN MONTH(O.ORDERDATE) = 2 THEN OD.QUANTITYORDERED * OD.PRICEEACH ELSE 0 END) AS FEBRUARY,
    SUM(CASE WHEN MONTH(O.ORDERDATE) = 3 THEN OD.QUANTITYORDERED * OD.PRICEEACH ELSE 0 END) AS MARCH,
    SUM(CASE WHEN MONTH(O.ORDERDATE) = 4 THEN OD.QUANTITYORDERED * OD.PRICEEACH ELSE 0 END) AS APRIL,
    SUM(CASE WHEN MONTH(O.ORDERDATE) = 5 THEN OD.QUANTITYORDERED * OD.PRICEEACH ELSE 0 END) AS MAY,
    SUM(CASE WHEN MONTH(O.ORDERDATE) = 6 THEN OD.QUANTITYORDERED * OD.PRICEEACH ELSE 0 END) AS JUNE,
    SUM(CASE WHEN MONTH(O.ORDERDATE) = 7 THEN OD.QUANTITYORDERED * OD.PRICEEACH ELSE 0 END) AS JULY,
    SUM(CASE WHEN MONTH(O.ORDERDATE) = 8 THEN OD.QUANTITYORDERED * OD.PRICEEACH ELSE 0 END) AS AUGUST,
    SUM(CASE WHEN MONTH(O.ORDERDATE) = 9 THEN OD.QUANTITYORDERED * OD.PRICEEACH ELSE 0 END) AS SEPTEMBER,
    SUM(CASE WHEN MONTH(O.ORDERDATE) = 10 THEN OD.QUANTITYORDERED * OD.PRICEEACH ELSE 0 END) AS OCTOBER,
    SUM(CASE WHEN MONTH(O.ORDERDATE) = 11 THEN OD.QUANTITYORDERED * OD.PRICEEACH ELSE 0 END) AS NOVEMBER,
    SUM(CASE WHEN MONTH(O.ORDERDATE) = 12 THEN OD.QUANTITYORDERED * OD.PRICEEACH ELSE 0 END) AS DECEMBER
FROM
    ORDERS O
        JOIN ORDERDETAILS OD ON O.ORDERNUMBER = OD.ORDERNUMBER
WHERE O.STATUS IN ('SHIPPED' , 'RESOLVED')
GROUP BY YEAR(O.ORDERDATE)
ORDER BY YEAR;


-- 8. Top five units sold products
SELECT 
    P.PRODUCTNAME AS PRODUCT_NAME,
    SUM(OD.QUANTITYORDERED) AS TOTAL_QUANTITY
FROM
    PRODUCTS P
        JOIN ORDERDETAILS OD ON P.PRODUCTCODE = OD.PRODUCTCODE
        JOIN ORDERS O ON OD.ORDERNUMBER = O.ORDERNUMBER
WHERE
    O.STATUS IN ('SHIPPED' , 'RESOLVED')
GROUP BY P.PRODUCTNAME
HAVING TOTAL_QUANTITY >= 1000
ORDER BY TOTAL_QUANTITY DESC
LIMIT 10;


-- 9. Bottom five units sold products
SELECT 
    P.PRODUCTNAME AS PRODUCT_NAME,
    SUM(OD.QUANTITYORDERED) AS TOTAL_QUANTITY
FROM
    PRODUCTS P
        JOIN ORDERDETAILS OD ON P.PRODUCTCODE = OD.PRODUCTCODE
        JOIN ORDERS O ON OD.ORDERNUMBER = O.ORDERNUMBER
WHERE
    O.STATUS IN ('SHIPPED' , 'RESOLVED')
GROUP BY P.PRODUCTNAME
ORDER BY TOTAL_QUANTITY ASC
LIMIT 5;



-- 10. Sales by Employee and Product Line.
SELECT 
    UPPER(CONCAT(E.FIRSTNAME, ' ',  E.LASTNAME)) AS FULL_NAME,
    SUM(CASE WHEN PL.PRODUCTLINE = 'CLASSIC CARS' THEN OD.QUANTITYORDERED * OD.PRICEEACH ELSE 0 END) AS 'CLASSIC_CARS',
    SUM(CASE WHEN PL.PRODUCTLINE = 'VINTAGE CARS' THEN OD.QUANTITYORDERED * OD.PRICEEACH ELSE 0 END) AS 'VINTAGE_CARS',
    SUM(CASE WHEN PL.PRODUCTLINE = 'TRUCKS AND BUSES' THEN OD.QUANTITYORDERED * OD.PRICEEACH ELSE 0 END) AS 'TRUCKS_AND_BUSES',
    SUM(CASE WHEN PL.PRODUCTLINE = 'MOTORCYCLES' THEN OD.QUANTITYORDERED * OD.PRICEEACH ELSE 0 END) AS 'MOTORCYCLES',
    SUM(CASE WHEN PL.PRODUCTLINE = 'PLANES' THEN OD.QUANTITYORDERED * OD.PRICEEACH ELSE 0 END) AS 'PLANES',
	SUM(CASE WHEN PL.PRODUCTLINE = 'TRAINS' THEN OD.QUANTITYORDERED * OD.PRICEEACH ELSE 0 END) AS 'TRAINS',
    SUM(CASE WHEN PL.PRODUCTLINE = 'SHIPS' THEN OD.QUANTITYORDERED * OD.PRICEEACH ELSE 0 END) AS 'SHIPS',
    SUM(OD.QUANTITYORDERED * OD.PRICEEACH) AS TOTAL_SALES
FROM EMPLOYEES E
	JOIN CUSTOMERS C ON E.EMPLOYEENUMBER = C.SALESREPEMPLOYEENUMBER
	JOIN ORDERS O ON C.CUSTOMERNUMBER = O.CUSTOMERNUMBER
	JOIN ORDERDETAILS OD ON O.ORDERNUMBER = OD.ORDERNUMBER
	JOIN PRODUCTS P ON OD.PRODUCTCODE = P.PRODUCTCODE
	JOIN PRODUCTLINES PL ON P.PRODUCTLINE = PL.PRODUCTLINE
WHERE O.STATUS IN ('SHIPPED', 'RESOLVED')
GROUP BY E.EMPLOYEENUMBER
ORDER BY TOTAL_SALES DESC, E.FIRSTNAME, E.LASTNAME;



-- 11. Customers placed order consecutively on 2003, 2004 and 2005. 
SELECT 
    Count(c2003.customerNumber) As Consecutive_customers
FROM
    (SELECT DISTINCT c.customerNumber, c.customerName
     FROM orders o
     JOIN customers c ON o.customerNumber = c.customerNumber
     WHERE YEAR(o.orderDate) = 2003 AND o.status IN ('Shipped', 'Resolved')) c2003
JOIN
    (SELECT DISTINCT c.customerNumber
     FROM orders o
     JOIN customers c ON o.customerNumber = c.customerNumber
     WHERE YEAR(o.orderDate) = 2004 AND o.status IN ('Shipped', 'Resolved')) c2004 ON c2003.customerNumber = c2004.customerNumber
JOIN
    (SELECT DISTINCT c.customerNumber
     FROM orders o
     JOIN customers c ON o.customerNumber = c.customerNumber
     WHERE YEAR(o.orderDate) = 2005 AND o.status IN ('Shipped', 'Resolved')) c2005 ON c2003.customerNumber = c2005.customerNumber;
     
-- There 19 customers purchased consecutively from 2003 to 2005.

-- 12. Customers order quantity consecutively on 2003, 2004 and 2005. 

WITH PURCHASEDIN2003 AS (
    SELECT C.CUSTOMERNUMBER, C.CUSTOMERNAME, SUM(OD.QUANTITYORDERED) AS QUANTITY2003
    FROM ORDERS O
    	JOIN CUSTOMERS C ON O.CUSTOMERNUMBER = C.CUSTOMERNUMBER
    	JOIN ORDERDETAILS OD ON O.ORDERNUMBER = OD.ORDERNUMBER
    WHERE YEAR(O.ORDERDATE) = 2003 AND O.STATUS IN ('SHIPPED', 'RESOLVED')
    GROUP BY C.CUSTOMERNUMBER, C.CUSTOMERNAME),
PURCHASEDIN2004 AS (
    SELECT C.CUSTOMERNUMBER, SUM(OD.QUANTITYORDERED) AS QUANTITY2004
    FROM ORDERS O
    	JOIN CUSTOMERS C ON O.CUSTOMERNUMBER = C.CUSTOMERNUMBER
    	JOIN ORDERDETAILS OD ON O.ORDERNUMBER = OD.ORDERNUMBER
    WHERE YEAR(O.ORDERDATE) = 2004 AND O.STATUS IN ('SHIPPED', 'RESOLVED')
    GROUP BY C.CUSTOMERNUMBER),
PURCHASEDIN2005 AS (
    SELECT C.CUSTOMERNUMBER, SUM(OD.QUANTITYORDERED) AS QUANTITY2005
    FROM ORDERS O
    	JOIN CUSTOMERS C ON O.CUSTOMERNUMBER = C.CUSTOMERNUMBER
    	JOIN ORDERDETAILS OD ON O.ORDERNUMBER = OD.ORDERNUMBER
    WHERE YEAR(O.ORDERDATE) = 2005 AND O.STATUS IN ('SHIPPED', 'RESOLVED')
    GROUP BY C.CUSTOMERNUMBER)
SELECT 
    P_2003.CUSTOMERNAME AS CUSTOMER_NAME,
    P_2003.QUANTITY2003 AS 2003_QUANTITY,
    P_2004.QUANTITY2004 AS 2004_QUANTITY,
    P_2005.QUANTITY2005 AS 2005_QUANTITY
FROM PURCHASEDIN2003 P_2003
	JOIN PURCHASEDIN2004 P_2004 ON P_2003.CUSTOMERNUMBER = P_2004.CUSTOMERNUMBER
	JOIN PURCHASEDIN2005 P_2005 ON P_2003.CUSTOMERNUMBER = P_2005.CUSTOMERNUMBER
ORDER BY 2003_QUANTITY DESC;

-- There are 19 customers are consecutively purchased order during 2003, 2004 and 2005. 


-- 13. How does the sales performance distribute across the employee hierarchy?
SELECT CONCAT(M.FIRSTNAME, ' ', M.LASTNAME ) AS MANAGER_NAME,
		CONCAT(E.FIRSTNAME, ' ', E.LASTNAME) AS SALES_REP_NAME, 
       SUM(OD.QUANTITYORDERED * OD.PRICEEACH) AS TOTAL_SALES
FROM EMPLOYEES E
	LEFT JOIN EMPLOYEES M ON E.REPORTSTO = M.EMPLOYEENUMBER
	JOIN CUSTOMERS C ON E.EMPLOYEENUMBER = C.SALESREPEMPLOYEENUMBER
	JOIN ORDERS O ON C.CUSTOMERNUMBER = O.CUSTOMERNUMBER
	JOIN ORDERDETAILS OD ON O.ORDERNUMBER = OD.ORDERNUMBER
WHERE O.STATUS IN ('SHIPPED', 'RESOLVED')
GROUP BY E.EMPLOYEENUMBER
ORDER BY TOTAL_SALES DESC;


-- 14. Countries have sales figures below the average country sales?
WITH COUNTRY_SALES AS (
    SELECT 
        C.COUNTRY,
        SUM(OD.QUANTITYORDERED * OD.PRICEEACH) AS TOTAL_SALES
    FROM 
        CUSTOMERS C
		JOIN ORDERS O ON C.CUSTOMERNUMBER = O.CUSTOMERNUMBER
		JOIN ORDERDETAILS OD ON O.ORDERNUMBER = OD.ORDERNUMBER
    WHERE O.STATUS IN ('SHIPPED', 'RESOLVED')
    GROUP BY C.COUNTRY ),
AVERAGE_SALES AS (
    SELECT 
        AVG(TOTAL_SALES) AS AVG_TOTAL_SALES
    FROM COUNTRY_SALES )

SELECT 
    CS.COUNTRY,
    CS.TOTAL_SALES
FROM COUNTRY_SALES CS, AVERAGE_SALES
WHERE CS.TOTAL_SALES < AVERAGE_SALES.AVG_TOTAL_SALES
ORDER BY CS.TOTAL_SALES DESC;
-- out of 21 countries 17 countries sales are lesser than the average sales of 4,28,539.


-- 15. Products have a sold quantity that is below the average sold quantity?

WITH TOTAL_QTY AS (
    SELECT P.PRODUCTNAME, SUM(OD.QUANTITYORDERED) AS TOTALQUANTITY
    FROM PRODUCTS P
		JOIN ORDERDETAILS OD ON P.PRODUCTCODE = OD.PRODUCTCODE
		JOIN ORDERS O ON OD.ORDERNUMBER = O.ORDERNUMBER
    WHERE O.STATUS IN ('SHIPPED', 'RESOLVED')
    GROUP BY P.PRODUCTNAME ),
AVERAGE_QUANTITY AS (
    SELECT CEIL(AVG(TOTALQUANTITY)) AS AVGQUANTITY
    FROM TOTAL_QTY )

SELECT 
	TQ.PRODUCTNAME AS PRODUCT,
	TQ.TOTALQUANTITY AS TOTAL_QUANTITY
FROM TOTAL_QTY TQ, AVERAGE_QUANTITY AQ
WHERE TQ.TOTALQUANTITY < AQ.AVGQUANTITY;


-- Out of 109 products 49 products sold quantity is lesser than the average quantity of 907.



-- 16. Customers whose purchase amount is lesser than average purchase amount.
WITH CUSTOMER_SALES AS (
    SELECT 
        C.CUSTOMERNUMBER, C.CUSTOMERNAME, 
        SUM(OD.QUANTITYORDERED * OD.PRICEEACH) AS TOTAL_SALES
    FROM 
        CUSTOMERS C
    JOIN ORDERS O ON C.CUSTOMERNUMBER = O.CUSTOMERNUMBER
    JOIN ORDERDETAILS OD ON O.ORDERNUMBER = OD.ORDERNUMBER
    WHERE 
        O.STATUS IN ('SHIPPED', 'RESOLVED')
    GROUP BY 
        C.CUSTOMERNUMBER ),
AVERAGE_SALES AS (
    SELECT 
        CEIL(AVG(TOTAL_SALES)) AS AVG_SALES
    FROM 
        CUSTOMER_SALES )

SELECT 
    CS.CUSTOMERNAME AS CUSTOMER_NAME, 
    CS.TOTAL_SALES
FROM 
    CUSTOMER_SALES CS, 
    AVERAGE_SALES
WHERE 
    CS.TOTAL_SALES < AVERAGE_SALES.AVG_SALES;

-- The toal customers are 98, out of which 65 customers pucharsed amount is lesser than the average purchased amount of 91830.



-- 17. Customer segmentation as based on purchase amount and number of orders placed. 
WITH CUSTOMER_SALES AS (
    SELECT 
        C.CUSTOMERNUMBER, 
        C.CUSTOMERNAME, 
        COUNT(O.ORDERNUMBER) AS NUMBER_OF_ORDERS, 
        SUM(OD.QUANTITYORDERED * OD.PRICEEACH) AS TOTAL_SALES
    FROM 
        CUSTOMERS C
    JOIN ORDERS O ON C.CUSTOMERNUMBER = O.CUSTOMERNUMBER
    JOIN ORDERDETAILS OD ON O.ORDERNUMBER = OD.ORDERNUMBER
    WHERE 
        O.STATUS IN ('SHIPPED', 'RESOLVED')
    GROUP BY 
        C.CUSTOMERNUMBER, 
        C.CUSTOMERNAME
), CUSTOMER_SEGMENTATION AS (
    SELECT 
        CUSTOMERNUMBER, 
        CUSTOMERNAME, 
        NUMBER_OF_ORDERS, 
        TOTAL_SALES,
        CASE
            WHEN TOTAL_SALES > 100000 THEN 'HIGH VALUE'
            WHEN NUMBER_OF_ORDERS > 10 THEN 'FREQUENT BUYERS'
            ELSE 'STANDARD'
        END AS CUSTOMER_SEGMENT,
        ROW_NUMBER() OVER (PARTITION BY CASE
            WHEN TOTAL_SALES > 100000 THEN 'HIGH VALUE'
            WHEN NUMBER_OF_ORDERS > 10 THEN 'FREQUENT BUYERS'
            ELSE 'STANDARD'
        END ORDER BY CUSTOMERNAME) AS RN
    FROM 
        CUSTOMER_SALES
)

SELECT 
    MAX(CASE WHEN CUSTOMER_SEGMENT = 'HIGH VALUE' THEN CUSTOMERNAME END) AS HIGH_VALUE_CUSTOMER,
    MAX(CASE WHEN CUSTOMER_SEGMENT = 'FREQUENT BUYERS' THEN CUSTOMERNAME END) AS FREQUENT_BUYERS,
    MAX(CASE WHEN CUSTOMER_SEGMENT = 'STANDARD' THEN CUSTOMERNAME END) AS STANDARD_CUSTOMER
FROM 
    CUSTOMER_SEGMENTATION
GROUP BY RN
ORDER BY RN;


-- There 27 High Value, 64 frequent buyer and 7 standard customers based on the order quantity and purchase amount. 



-- 18.  Sales Conversion Rate
SELECT 
    COUNT(DISTINCT CASE
            WHEN STATUS IN ('SHIPPED' , 'RESOLVED') THEN ORDERNUMBER
        END) AS SHIPPED_RESOLVED_ORDERS,
    COUNT(DISTINCT ORDERNUMBER) AS TOTAL_ORDERS,
    ROUND((COUNT(DISTINCT CASE
                    WHEN STATUS IN ('SHIPPED', 'RESOLVED') THEN ORDERNUMBER
                END) / COUNT(DISTINCT ORDERNUMBER)) * 100,
            2) AS CONVERSION_RATE
FROM
    ORDERS;

-- The Sales conversion rate is 94.17.

-- 19. Sales growth rate
SELECT 
    YEAR(ORDERDATE) AS YEAR,
    MONTH(ORDERDATE) AS MONTH,
    SUM(QUANTITYORDERED * PRICEEACH) AS TOTAL_SALES,
    LAG(SUM(QUANTITYORDERED * PRICEEACH), 1) OVER (ORDER BY YEAR(ORDERDATE), MONTH(ORDERDATE)) AS PREVIOUS_MONTH_SALES,
    ROUND((SUM(QUANTITYORDERED * PRICEEACH) - LAG(SUM(QUANTITYORDERED * PRICEEACH), 1) 
              OVER (ORDER BY YEAR(ORDERDATE), MONTH(ORDERDATE))) / LAG(SUM(QUANTITYORDERED * PRICEEACH), 1) 
          		OVER (ORDER BY YEAR(ORDERDATE), MONTH(ORDERDATE)) * 100,2) AS GROWTH_PERCENTAGE
FROM ORDERS
	JOIN ORDERDETAILS USING (ORDERNUMBER)
WHERE STATUS IN ('SHIPPED', 'RESOLVED')
GROUP BY YEAR, MONTH
ORDER BY YEAR, MONTH;



-- 20. Average order value 
WITH ORDER_VALUE AS (
    SELECT 
        ORDERNUMBER,
        SUM(QUANTITYORDERED * PRICEEACH) AS TOTAL_ORDER_VALUE
    FROM ORDERDETAILS
		JOIN ORDERS USING (ORDERNUMBER)
    WHERE STATUS IN ('SHIPPED', 'RESOLVED')
    GROUP BY ORDERNUMBER ) 
SELECT 
    CEIL(AVG(TOTAL_ORDER_VALUE)) AS AVERAGE_ORDER_VALUE
FROM ORDER_VALUE;




-- 21. Profit margin Percentage
SELECT 
    PRODUCTNAME AS PRODUCT,
    SUM(QUANTITYORDERED * (PRICEEACH - BUYPRICE)) AS PROFIT,
    ROUND((SUM(QUANTITYORDERED * (PRICEEACH - BUYPRICE)) / SUM(QUANTITYORDERED * PRICEEACH)) * 100,2) AS PROFIT_MARGIN_PERCENTAGE
FROM PRODUCTS
	JOIN ORDERDETAILS USING (PRODUCTCODE)
	JOIN ORDERS USING (ORDERNUMBER)
WHERE STATUS IN ('SHIPPED', 'RESOLVED')
GROUP BY PRODUCT
HAVING PROFIT_MARGIN_PERCENTAGE >=50
ORDER BY PROFIT_MARGIN_PERCENTAGE DESC
LIMIT 10;
-- There 15 products profit margin is greater than 50% and 94 products are between 20% - 50%. Which illustrate that high profit producs are fewer. 

-- 22. Market Basket Analysis 
SELECT 
    PA.PRODUCTNAME AS PRODUCT_A,
    PB.PRODUCTNAME AS PRODUCT_B,
    COUNT(*) AS TIMES_BOUGHT_TOGETHER
FROM 
    ORDERDETAILS A
JOIN ORDERDETAILS B ON A.ORDERNUMBER = B.ORDERNUMBER AND A.PRODUCTCODE < B.PRODUCTCODE
JOIN PRODUCTS PA ON A.PRODUCTCODE = PA.PRODUCTCODE
JOIN PRODUCTS PB ON B.PRODUCTCODE = PB.PRODUCTCODE
JOIN ORDERS O ON A.ORDERNUMBER = O.ORDERNUMBER
WHERE O.STATUS IN ('SHIPPED', 'RESOLVED')
GROUP BY PA.PRODUCTNAME, PB.PRODUCTNAME
HAVING TIMES_BOUGHT_TOGETHER >=20
ORDER BY TIMES_BOUGHT_TOGETHER DESC
LIMIT 10;
    
     
-- 23. Analysis of Order Status by Total Orders, Sub-Orders, Quantity Ordered, and Total Sales
SELECT 
    CASE 
        WHEN GROUPING(O.STATUS) = 1 THEN 'TOTAL'
        ELSE O.STATUS
    END AS STATUS,
    COUNT(DISTINCT O.ORDERNUMBER) AS TOTAL_ORDERS,
    COUNT(O.ORDERNUMBER) AS SUB_ORDERS,
    SUM(OD.QUANTITYORDERED) AS QUANTITY_ORDERED,
    SUM(OD.QUANTITYORDERED * OD.PRICEEACH) AS TOTAL_SALES
FROM 
    CUSTOMERS C
	JOIN ORDERS O ON C.CUSTOMERNUMBER = O.CUSTOMERNUMBER
	JOIN ORDERDETAILS OD ON O.ORDERNUMBER = OD.ORDERNUMBER
GROUP BY O.STATUS WITH ROLLUP
ORDER BY 
    CASE 
        WHEN O.STATUS = 'SHIPPED' THEN 1
        WHEN O.STATUS = 'RESOLVED' THEN 2
        WHEN O.STATUS IS NULL THEN 99
        ELSE 3
    END,
    TOTAL_SALES DESC;

-- 24. Average Shipping days
SELECT 
    CEIL(AVG(DATEDIFF(O.SHIPPEDDATE, O.ORDERDATE))) AS AVERAGE_SHIPPING_DAYS
FROM 
    ORDERS O
WHERE 
    O.SHIPPEDDATE IS NOT NULL AND
    O.STATUS IN ('SHIPPED', 'RESOLVED');  


-- 25. Annual Sales Analysis for Shipped and Resolved Orders
SELECT 
    YEAR(O.ORDERDATE) AS ORDER_YEAR, 
    SUM(OD.QUANTITYORDERED * OD.PRICEEACH) AS TOTALSALES
FROM ORDERS O
	JOIN ORDERDETAILS OD ON O.ORDERNUMBER = OD.ORDERNUMBER
WHERE O.STATUS IN ('SHIPPED', 'RESOLVED')
GROUP BY ORDER_YEAR
ORDER BY ORDER_YEAR;




/* ---------------------------------------------------------------------- 
|																		|
|							Conclusions									|
|																		|
-----------------------------------------------------------------------*/
-- The USA is the leading market for AXON, contributing about $8.99 million in revenue, one-third of the total sales.
-- A high concentration of sales is observed with the Euro+ Shopping Channel and Mini Gifts Distributors Ltd., accounting for over 70% of total orders.
-- The '1992 Ferrari 360 Spider red' is the most popular product, indicating strong customer preference for specific classic models.
-- Sales representative Gerard Hernandez leads significantly in sales, especially in classic cars, highlighting disparities in sales performance among staff.
-- A notable sales increase in the fourth quarter (October and November) suggests a seasonal impact on consumer purchasing behaviour.
-- The sales conversion rate is impressively high at 94.17%, indicating efficient order fulfilment and customer satisfaction.
-- The average order value across all shipped and resolved orders is $29,314, focusing on high-value transactions.
-- In purchases, the frequent pairing of products like the '1934 Ford V8 Coupe' and '18th Century Vintage Horse Carriage' suggests effective cross-selling strategies.
-- Customer segmentation into 27 high-value, 64 frequent buyers and 7 standard customers underscores the need for differentiated marketing approaches.
-- 17 out of 21 countries have sales below the average, indicating potential for growth and better market penetration in these areas.



/* ---------------------------------------------------------------------- 
|																		|
|							Recommendation								|
|																		|
-----------------------------------------------------------------------*/
-- Diversify the market to reduce reliance on the US and mitigate risks by investing in emerging markets.
-- Use the popularity of top-selling products in marketing campaigns to attract new customers.
-- Implement sales training programs to improve the performance of sales representatives.
-- Enhance the online shopping experience to improve the sales conversion rate further.
-- Create loyalty programs and personalized marketing for customer segments to increase purchase frequency and value.

